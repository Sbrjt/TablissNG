name: Publish to Stores

on:
  push:
    tags:
      - v*.*.*
  workflow_dispatch:
    inputs:
      skip_firefox_upload:
        description: 'Skip Firefox Store upload'
        type: boolean
        default: false
      skip_github_release:
        description: 'Skip GitHub Release creation'
        type: boolean
        default: false
      skip_chrome_upload:
        description: 'Skip Chrome Web Store upload'
        type: boolean
        default: false
      skip_edge_upload:
        description: 'Skip Edge Web Store upload'
        type: boolean
        default: false
      ref:
        description: 'Git ref (tag/branch) to build from'
        required: false
        type: string
        default: 'main'

jobs:
  build:
    name: Build ${{ matrix.build_target }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_target:
          - chromium
          - firefox
          - web
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - run: npm ci
      - run: npm run build:${{ matrix.build_target }}
        env:
          GIPHY_API_KEY: ${{ secrets.GIPHY_API_KEY }}
          UNSPLASH_API_KEY: ${{ secrets.UNSPLASH_API_KEY }}
          NASA_API_KEY: ${{ secrets.NASA_API_KEY }}
      - uses: actions/upload-artifact@v4
        with:
          name: tabliss-${{ matrix.build_target }}
          path: dist/${{ matrix.build_target }}

  upload-firefox-store:
    needs: [build]
    if: ${{ !inputs.skip_firefox_upload }}
    name: Upload extension to Firefox Store
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - uses: actions/download-artifact@v4
        with:
          name: tabliss-firefox
      - run: zip release.zip ./* -r; mv release.zip ../release.zip; rm -rf *
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
      - run: zip source.zip ./* -r; mv source.zip ../source.zip; rm -rf *
      - run: mv ../release.zip release.zip; mv ../source.zip source.zip
      - uses: yayuyokitano/firefox-addon@v0.0.6-alpha
        with:
          api_key: ${{ secrets.AMO_ISSUER }}
          api_secret: ${{ secrets.AMO_SECRET }}
          guid: "extension@tabliss-maintained"
          xpi_path: release.zip
          src_path: source.zip

  upload-chrome-store:
    needs: [build]
    if: ${{ !inputs.skip_chrome_upload }}
    name: Upload extension to Chrome Web Store
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - uses: actions/download-artifact@v4
        with:
          name: tabliss-chromium
      - run: zip -r release.zip ./*
      - uses: mnao305/chrome-extension-upload@v5.0.0
        with:
          file-path: release.zip
          extension-id: ${{ secrets.CHROME_EXTENSION_ID }}
          client-id: ${{ secrets.CHROME_CLIENT_ID }}
          client-secret: ${{ secrets.CHROME_CLIENT_SECRET }}
          refresh-token: ${{ secrets.CHROME_REFRESH_TOKEN }}
          publish: true

  upload-edge-store:
  needs: [build]
  if: ${{ !inputs.skip_edge_upload }}
  name: Upload extension to Edge Store
  runs-on: ubuntu-latest
  steps:
    - uses: actions/setup-node@v4
      with:
        node-version: 22

    - uses: actions/download-artifact@v4
      with:
        name: tabliss-chromium

    - name: Create Release ZIP
      run: zip -r release.zip ./*

    # -----------------------
    # Upload to Microsoft Edge Store
    # -----------------------
    - name: Upload Edge Extension Package
      id: edge-upload
      run: |
        FILE_PATH="release.zip"
        UPLOAD_URL="https://api.addons.microsoftedge.microsoft.com/v1/products/${{ secrets.EDGE_PRODUCT_ID }}/submissions/draft/package"

        # Upload the package
        response=$(curl -s -D - \
          -H "Authorization: ApiKey ${{ secrets.EDGE_API_KEY }}" \
          -H "X-ClientID: ${{ secrets.EDGE_CLIENT_ID }}" \
          -H "Content-Type: application/zip" \
          -X POST \
          --data-binary @"$FILE_PATH" \
          "$UPLOAD_URL")

        echo "$response" > upload_response.txt
        status_code=$(head -n 1 upload_response.txt | awk '{print $2}')
        if [ "$status_code" != "202" ]; then
          echo "Upload failed with status $status_code"
          cat upload_response.txt
          exit 1
        fi

        # Extract operation ID from Location header
        OPERATION_ID=$(grep -i Location upload_response.txt | awk '{print $2}' | tr -d '\r\n')
        echo "operation_id=$OPERATION_ID" >> $GITHUB_OUTPUT

    - name: Wait for Edge Upload to Complete
      run: |
        RETRIES=10
        SLEEP=10
        OP_ID="${{ steps.edge-upload.outputs.operation_id }}"

        for i in $(seq 1 $RETRIES); do
          STATUS=$(curl -s \
            -H "Authorization: ApiKey ${{ secrets.EDGE_API_KEY }}" \
            -H "X-ClientID: ${{ secrets.EDGE_CLIENT_ID }}" \
            "https://api.addons.microsoftedge.microsoft.com/v1/products/${{ secrets.EDGE_PRODUCT_ID }}/submissions/draft/package/operations/$OP_ID" \
            | jq -r '.status')

          echo "Upload status: $STATUS"
          if [ "$STATUS" != "InProgress" ]; then
            if [ "$STATUS" = "Succeeded" ]; then
              exit 0
            else
              echo "Upload failed: $STATUS"
              exit 1
            fi
          fi
          sleep $SLEEP
        done
        echo "Upload timed out"
        exit 1

    - name: Publish Edge Extension
      id: edge-publish
      run: |
        PUBLISH_URL="https://api.addons.microsoftedge.microsoft.com/v1/products/${{ secrets.EDGE_PRODUCT_ID }}/submissions"
        response=$(curl -s -D - \
          -H "Authorization: ApiKey ${{ secrets.EDGE_API_KEY }}" \
          -H "X-ClientID: ${{ secrets.EDGE_CLIENT_ID }}" \
          -H "Content-Type: application/json" \
          -X POST \
          -d '{ "notes": "Automated publish from GitHub Actions" }' \
          "$PUBLISH_URL")

        echo "$response" > publish_response.txt
        status_code=$(head -n 1 publish_response.txt | awk '{print $2}')
        if [ "$status_code" != "202" ]; then
          echo "Publish failed with status $status_code"
          cat publish_response.txt
          exit 1
        fi

        # Extract operation ID from Location header
        PUB_OPERATION_ID=$(grep -i Location publish_response.txt | awk '{print $2}' | tr -d '\r\n')
        echo "operation_id=$PUB_OPERATION_ID" >> $GITHUB_OUTPUT

    - name: Wait for Edge Publish to Complete
      run: |
        RETRIES=15
        SLEEP=20
        PUB_OP_ID="${{ steps.edge-publish.outputs.operation_id }}"

        for i in $(seq 1 $RETRIES); do
          STATUS=$(curl -s \
            -H "Authorization: ApiKey ${{ secrets.EDGE_API_KEY }}" \
            -H "X-ClientID: ${{ secrets.EDGE_CLIENT_ID }}" \
            "https://api.addons.microsoftedge.microsoft.com/v1/products/${{ secrets.EDGE_PRODUCT_ID }}/submissions/operations/$PUB_OP_ID" \
            | jq -r '.status')

          echo "Publish status: $STATUS"
          if [ "$STATUS" != "InProgress" ]; then
            if [ "$STATUS" = "Succeeded" ]; then
              exit 0
            else
              echo "Publish failed: $STATUS"
              exit 1
            fi
          fi
          sleep $SLEEP
        done
        echo "Publish timed out"
        exit 1

  create-release:
    needs: [build]
    if: ${{ !inputs.skip_github_release }}
    name: Create GitHub Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Create ZIP files
        run: |
          cd artifacts/tabliss-firefox
          zip -r ../../tabliss-firefox.zip ./*
          cd ../tabliss-chromium
          zip -r ../../tabliss-chromium.zip ./*
          cd ../tabliss-web
          zip -r ../../tabliss-web.zip ./*
          cd ../..
      - name: Get version without v prefix
        id: version
        run: |
          REF=${{ inputs.ref || github.ref_name }}
          VERSION=${REF#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "ref=$REF" >> $GITHUB_OUTPUT
      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: softprops/action-gh-release@v1
        with:
          name: Version ${{ steps.version.outputs.version }}
          tag_name: ${{ steps.version.outputs.ref }}
          files: |
            tabliss-firefox.zip
            tabliss-chromium.zip
            tabliss-web.zip
          draft: true
          prerelease: false
          generate_release_notes: true
